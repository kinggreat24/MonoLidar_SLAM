/*
 * NeighborFinderKdd.cpp
 *
 *  Created on: Feb 6, 2017
 *      Author: wilczynski
 */

#include "NeighborFinderKdd.h"
#include "Converter.h"
#include "Logger.h"

namespace Mono_Lidar
{

void NeighborFinderKdd::InitKdTree(const Eigen::Matrix2Xd& points_cs_image_visible)
{
	Logger::Instance().Log(Logger::MethodStart, "DepthEstimator::InitKdTree");

	// Precheck
//	if (!_isInitializedPointCloud)
//			throw "call of 'InitKdTree' without 'setInputCloud'";
//	_isInitializedKddTree = true;

	auto pointsVisibleF = points_cs_image_visible.cast<float>().transpose();
	flann::Matrix<DistanceType::ElementType> flann_dataset;

	// creates the flann dataset with the points in camera cs in row major matrix order
	flann_dataset = convertEigen2FlannRow(pointsVisibleF);

	// build flann tree
	_kdTreeIndex = std::make_unique<flann::Index<DistanceType>>(flann_dataset, flann::KDTreeIndexParams(_params.kd_index_tree_params));

	_kdTreeIndex->buildIndex(flann_dataset);

	Logger::Instance().Log(Logger::MethodEnd, "DepthEstimator::InitKdTree");
}


void NeighborFinderKdd::getNeighbors(const Eigen::Vector2d& featurePoint_image_cs, const Eigen::Matrix3Xd& points_cs_camera,
		const std::vector<int>& pointIndex, std::vector<int>& pcIndicesRaw,
		const std::shared_ptr<DepthCalcStatsSinglePoint>& calcStats,
		const float scaleWidth, const float scaleHeight)
{
//	if (!_isInitializedPointCloud)
//		throw "call of 'CalculateDepth' without 'InitKdTree'";

	// list of point indices of the pointcloud (of points which are visible in the image)
	std::vector<std::vector<int>> indices_vec;
	// Distances of the received points in relation to the query point
	std::vector<std::vector<float>> dist_vec;
	Eigen::Vector2f featurePoint_image_csF = featurePoint_image_cs.cast<float>();

	//cout << "Feature point X: " << featurePoint_image_cs[0] << ", Y: " << featurePoint_image_cs[1] << endl;

	// Start a nearest neighbor search in the kd tree
	DistanceType::ElementType queryData[] = {static_cast<DistanceType::ElementType>(featurePoint_image_csF(0)),
											 static_cast<DistanceType::ElementType>(featurePoint_image_csF(1))};
	const flann::Matrix<DistanceType::ElementType> query(queryData, 1, 2);


	bool doNNSearch = _parameters->do_use_nearestNeighborSearch;
	bool doRadiusSearch =_parameters->do_use_radiusSearch;

	// Get the neighbors
	uint neighborsCount;
	if (doNNSearch && doRadiusSearch)
		throw "NN and Radius search is selected at once. Check the params file and select only one of both methods.";
	else if (doNNSearch)
	{
		neighborsCount = _parameters->nnSearch_count;
		_kdTreeIndex->knnSearch(query, indices_vec, dist_vec, neighborsCount, flann::SearchParams(_params.search_params));
	}
	else if (doRadiusSearch)
	{
		neighborsCount = _kdTreeIndex->radiusSearch(query, indices_vec, dist_vec, _parameters->radiusSearch_radius,
												 flann::SearchParams(_params.search_params));
	}
	else
	{
		throw "No method Kd tree search selected. Check config file.";
	}

	// Extract the desired points
	for (uint i = 0; i < neighborsCount; i++)
	{
		// get the point index of the projected adjusted pointcloud
	    int index = indices_vec[0][i];

	    // get the index of the original point cloud
		int indexRaw = pointIndex[index];

		pcIndicesRaw.push_back(indexRaw);

//		Eigen::Vector3d corner(points_cs_camera(0, indexRaw), points_cs_camera(1, indexRaw), points_cs_camera(2, indexRaw));
//		neighbors.push_back(corner);
	}


//    if (_debugMode)
//    {
//    	using namespace std;
//
//		_debugFile << "NN result: " << endl;
//		_debugFile << "Printing 2d Points: " << endl;
//		_debugFile << "point feature: " << featurePoint_image_csF.transpose() << endl;
//
//		for (uint i = 0; i < neighbors.size(); i++)
//		{
//			int indexVis = indices_vec[0][0];
//			int indexRaw = _pointIndex[indexVis];
//			Eigen::Vector2d cornerPoint2dVisible(_points_cs_image_visible(0, indexVis), _points_cs_image_visible(1, indexVis));
//			Eigen::Vector2d cornerPoint2dRaw(_points_cs_image(0, indexRaw), _points_cs_image(1, indexRaw));
//			Eigen::Vector2d cornerProjected;
//			_camera->getImagePoint(neighbors[i], cornerProjected);
//
//			_debugFile << "POINT " << i << endl;
//			_debugFile << "Index visible 1: " << indexVis << endl;
//			_debugFile << "Index raw 1: " << indexRaw << endl;
//			_debugFile << "point 2d visible 1: " << cornerPoint2dVisible.transpose() << endl;
//			_debugFile << "point 2d raw 1: " << cornerPoint2dRaw.transpose() << endl;
//			_debugFile << "point 3d: " << neighbors[i].transpose() << endl;
//			_debugFile << "corner point projection 1: " << cornerProjected.transpose() << endl;
//		}
//    }
}



}


